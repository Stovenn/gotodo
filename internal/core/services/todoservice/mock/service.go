// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/stovenn/gotodo/internal/core/ports (interfaces: TodoService)

// Package mockservice is a generated GoMock package.
package mockservice

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/stovenn/gotodo/internal/core/domain"
)

// MockTodoService is a mock of TodoService interface.
type MockTodoService struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServiceMockRecorder
}

// MockTodoServiceMockRecorder is the mock recorder for MockTodoService.
type MockTodoServiceMockRecorder struct {
	mock *MockTodoService
}

// NewMockTodoService creates a new mock instance.
func NewMockTodoService(ctrl *gomock.Controller) *MockTodoService {
	mock := &MockTodoService{ctrl: ctrl}
	mock.recorder = &MockTodoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoService) EXPECT() *MockTodoServiceMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MockTodoService) AddTodo(arg0 domain.TodoCreationRequest) (*domain.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", arg0)
	ret0, _ := ret[0].(*domain.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MockTodoServiceMockRecorder) AddTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MockTodoService)(nil).AddTodo), arg0)
}

// DeleteTodo mocks base method.
func (m *MockTodoService) DeleteTodo(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoServiceMockRecorder) DeleteTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoService)(nil).DeleteTodo), arg0)
}

// FindTodoByID mocks base method.
func (m *MockTodoService) FindTodoByID(arg0 string) (*domain.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTodoByID", arg0)
	ret0, _ := ret[0].(*domain.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTodoByID indicates an expected call of FindTodoByID.
func (mr *MockTodoServiceMockRecorder) FindTodoByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTodoByID", reflect.TypeOf((*MockTodoService)(nil).FindTodoByID), arg0)
}

// ListTodos mocks base method.
func (m *MockTodoService) ListTodos() ([]*domain.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTodos")
	ret0, _ := ret[0].([]*domain.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTodos indicates an expected call of ListTodos.
func (mr *MockTodoServiceMockRecorder) ListTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTodos", reflect.TypeOf((*MockTodoService)(nil).ListTodos))
}

// PartiallyUpdateTodo mocks base method.
func (m *MockTodoService) PartiallyUpdateTodo(arg0 string, arg1 domain.TodoPartialUpdateRequest) (*domain.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartiallyUpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(*domain.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartiallyUpdateTodo indicates an expected call of PartiallyUpdateTodo.
func (mr *MockTodoServiceMockRecorder) PartiallyUpdateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartiallyUpdateTodo", reflect.TypeOf((*MockTodoService)(nil).PartiallyUpdateTodo), arg0, arg1)
}

// UpdateTodo mocks base method.
func (m *MockTodoService) UpdateTodo(arg0 string, arg1 domain.TodoUpdateRequest) (*domain.TodoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", arg0, arg1)
	ret0, _ := ret[0].(*domain.TodoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MockTodoServiceMockRecorder) UpdateTodo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MockTodoService)(nil).UpdateTodo), arg0, arg1)
}
